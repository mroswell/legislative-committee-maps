{
  "name": "modernizr",
  "version": "3.0.0-pre",
  "description": "Modernizr is a JavaScript library that detects HTML5 and CSS3 features in the user’s browser.",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "file": "0.2.1",
    "mkdirp": "~0.3.4",
    "optimist": "~0.3.5",
    "requirejs": "~2.1.4",
    "underscore": "~1.4.4",
    "marked": "~0.2.8",
    "matchdep": "~0.1.2",
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.3.0",
    "grunt-contrib-uglify": "~0.2.0",
    "grunt-contrib-watch": "~0.3.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-copy": "~0.4.0",
    "grunt-contrib-requirejs": "~0.4.0"
  },
  "devDependencies": {
    "grunt-contrib-qunit": "~0.2.0",
    "grunt-contrib-nodeunit": "~0.2.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "main": "./lib/cli",
  "repository": {
    "type": "git",
    "url": "git://github.com/Modernizr/Modernizr.git"
  },
  "bugs": {
    "url": "https://github.com/Modernizr/Modernizr/issues"
  },
  "keywords": [
    "html5",
    "css3",
    "browser",
    "feature detection"
  ],
  "author": {
    "name": "Modernizr",
    "url": "http://modernizr.com/"
  },
  "contributors": [
    {
      "name": "Faruk Ates"
    },
    {
      "name": "Paul Irish"
    },
    {
      "name": "Alex Sexton"
    },
    {
      "name": "Ryan Seddon"
    },
    {
      "name": "Alexander Farkas"
    },
    {
      "name": "Ben Alman"
    },
    {
      "name": "Stu Cox"
    }
  ],
  "license": "MIT",
  "readme": "# Modernizr [![Build Status](https://secure.travis-ci.org/Modernizr/Modernizr.png?branch=master)](http://travis-ci.org/Modernizr/Modernizr)\n\n##### Modernizr is a JavaScript library that detects HTML5 and CSS3 features in the user’s browser.\n\n- [Website](http://www.modernizr.com)\n- [Documentation](http://www.modernizr.com/docs/)\n\nModernizr tests which native CSS3 and HTML5 features are available in the current UA and makes the results available to you in two ways: as properties on a global `Modernizr` object, and as classes on the `<html>` element. This information allows you to progressively enhance your pages with a granular level of control over the experience.\n\nModernizr has an optional (*not included*) conditional resource loader called `Modernizr.load()`, based on [Yepnope.js](http://yepnopejs.com). You can get a build that includes `Modernizr.load()`, as well as choosing which feature tests to include on the [Download page](http://www.modernizr.com/download/).\n\n## New Asynchronous Event Listeners\n\nOften times people want to know when an asynchronous test is done so they can allow their application to react to it.\nIn the past, you've had to rely on watching properties or `<html>` classes. Only events on **asynchronous** tests are\nsupported. Synchronous tests should be handled synchronously for speed and consistency reasons.\n\nThe new api looks like this:\n\n```javascript\n// Listen to a test, give it a callback\nModernizr.on('testname', function( result ) {\n  if (result) {\n    console.log('The test passed!');\n  }\n  else {\n    console.log('The test failed!');\n  }\n});\n```\n\nWe guarantee that we'll only invoke your function once (per time that you call `on`). We are currently not exposing\na method for exposing the `trigger` functionality. Instead, if you'd like to have control over async tests, use the\n`src/addTest` feature, and any test that you set will automatically expose and trigger the `on` functionality.\n\n## Test suite\n\nRun the [test suite](http://modernizr.github.com/Modernizr/test/)\n\n\n## Building Modernizr v3\n\n### To generate everything in 'config-all.json':\n\n```js\ngrunt build\n//outputs to ./dist/modernizr-build.js\n```\n\n### To run tests (in phantom):\n\n```js\ngrunt qunit\n```\n\n### To run tests (in browser):\n\n```shell\ngrunt build\nserve .\nvisit <url>/tests\n```\n\n### To see simple build in browser:\n\nserve the root dir, `<url>/test/modular.html`\n\n\n### To see the build tool:\n\n\n* checkout the modernizr.com code\n* install all your gems and bundles and jekyll and shit\n* `jekyll`\n* `serve ./_sites`\n* visit <url>/download\n* It should be just a big list of things you can build with no frills.\n\n\n### API Reference\n\nModernizr can be used programmatically via npm:\n\n```javascript\nvar modernizr = require(\"modernizr\");\n```\n\n#### Building\n\nA `build` method is exposed for generating custom Modernizr builds. Example:\n\n```javascript\nvar modernizr = require(\"modernizr\");\n\nvar result = modernizr.build({}, function (result) {\n  console.log(result.code); // full source\n  console.log(result.min); // minfied output\n});\n```\n\nThe first parameter takes a JSON object of options and feature-detects to include. See [`lib/config-all.json`](lib/config-all.json) for all available options.\n\nThe second parameter is a function invoked on task completion.\n\n## License\n\nMIT license\n",
  "readmeFilename": "readme.md",
  "_id": "modernizr@3.0.0-pre",
  "dist": {
    "shasum": "18c50b88af0806a70b4adf693b9a81810b9d2a1b"
  },
  "_from": "modernizr@^3.0.0-pre",
  "_resolved": "https://registry.npmjs.org/modernizr/-/modernizr-3.0.0-pre.tgz"
}
